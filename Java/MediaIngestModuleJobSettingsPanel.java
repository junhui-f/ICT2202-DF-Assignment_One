/*
 * Sample module ingest job settings panel in the public domain.
 * Feel free to use this as a template for your module ingest job settings
 * panels.
 *
 *  Contact: Brian Carrier [carrier <at> sleuthkit [dot] org]
 *
 *  This is free and unencumbered software released into the public domain.
 *
 *  Anyone is free to copy, modify, publish, use, compile, sell, or
 *  distribute this software, either in source code form or as a compiled
 *  binary, for any purpose, commercial or non-commercial, and by any
 *  means.
 *
 *  In jurisdictions that recognize copyright laws, the author or authors
 *  of this software dedicate any and all copyright interest in the
 *  software to the public domain. We make this dedication for the benefit
 *  of the public at large and to the detriment of our heirs and
 *  successors. We intend this dedication to be an overt act of
 *  relinquishment in perpetuity of all present and future rights to this
 *  software under copyright law.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 */
package ICT.DF.TryingHardest;

import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettings;
import org.sleuthkit.autopsy.ingest.IngestModuleIngestJobSettingsPanel;

/**
 * UI component used to make per ingest job settings for sample ingest modules.
 */
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
public class MediaIngestModuleJobSettingsPanel extends IngestModuleIngestJobSettingsPanel {

    /**
     * Creates new form SampleIngestModuleIngestJobSettings
     */
    public MediaIngestModuleJobSettingsPanel(MediaIngestModuleJobSettings settings) {
        initComponents();
        customizeComponents(settings);
    }

    
    /*
    * -->
    * --> Set this to preselect checkbox
    * -->
    */
    private void customizeComponents(MediaIngestModuleJobSettings settings) {
//        UI_CheckBox_ImageAnalysis.setSelected(settings.getImageAnalysisChoice());
    }

    /**
     * Gets the ingest job settings for an ingest module.
     *
     * @return The ingest settings.
     */
    @Override
    public IngestModuleIngestJobSettings getSettings() {
//        return new MediaIngestModuleJobSettings(skipKnownFilesCheckBox.isSelected());
        return new MediaIngestModuleJobSettings(UI_CheckBox_ImageAnalysis.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UI_CheckBox_ImageAnalysis = new javax.swing.JCheckBox();
        UI_CheckBox_AudioAnalysis = new javax.swing.JCheckBox();
        UI_CheckBox_VideoAnalysis = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(UI_CheckBox_ImageAnalysis, org.openide.util.NbBundle.getMessage(MediaIngestModuleJobSettingsPanel.class, "MediaIngestModuleJobSettingsPanel.UI_CheckBox_ImageAnalysis.text")); // NOI18N
        UI_CheckBox_ImageAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UI_CheckBox_ImageAnalysisActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(UI_CheckBox_AudioAnalysis, org.openide.util.NbBundle.getMessage(MediaIngestModuleJobSettingsPanel.class, "MediaIngestModuleJobSettingsPanel.UI_CheckBox_AudioAnalysis.text")); // NOI18N
        UI_CheckBox_AudioAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UI_CheckBox_AudioAnalysisActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(UI_CheckBox_VideoAnalysis, org.openide.util.NbBundle.getMessage(MediaIngestModuleJobSettingsPanel.class, "MediaIngestModuleJobSettingsPanel.UI_CheckBox_VideoAnalysis.text")); // NOI18N
        UI_CheckBox_VideoAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UI_CheckBox_VideoAnalysisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UI_CheckBox_VideoAnalysis)
                    .addComponent(UI_CheckBox_AudioAnalysis)
                    .addComponent(UI_CheckBox_ImageAnalysis))
                .addContainerGap(283, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UI_CheckBox_ImageAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UI_CheckBox_AudioAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UI_CheckBox_VideoAnalysis)
                .addContainerGap(207, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UI_CheckBox_ImageAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UI_CheckBox_ImageAnalysisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UI_CheckBox_ImageAnalysisActionPerformed

    private void UI_CheckBox_AudioAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UI_CheckBox_AudioAnalysisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UI_CheckBox_AudioAnalysisActionPerformed

    private void UI_CheckBox_VideoAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UI_CheckBox_VideoAnalysisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UI_CheckBox_VideoAnalysisActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox UI_CheckBox_AudioAnalysis;
    private javax.swing.JCheckBox UI_CheckBox_ImageAnalysis;
    private javax.swing.JCheckBox UI_CheckBox_VideoAnalysis;
    // End of variables declaration//GEN-END:variables
}
